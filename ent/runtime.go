// Code generated by ent, DO NOT EDIT.

package ent

import (
	"github.com/DeusFerrariis/order-mgmt-product/ent/product"
	"github.com/DeusFerrariis/order-mgmt-product/ent/schema"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	productFields := schema.Product{}.Fields()
	_ = productFields
	// productDescSku is the schema descriptor for sku field.
	productDescSku := productFields[0].Descriptor()
	// product.SkuValidator is a validator for the "sku" field. It is called by the builders before save.
	product.SkuValidator = productDescSku.Validators[0].(func(string) error)
	// productDescDescription is the schema descriptor for description field.
	productDescDescription := productFields[1].Descriptor()
	// product.DescriptionValidator is a validator for the "description" field. It is called by the builders before save.
	product.DescriptionValidator = productDescDescription.Validators[0].(func(string) error)
	// productDescCost is the schema descriptor for cost field.
	productDescCost := productFields[2].Descriptor()
	// product.CostValidator is a validator for the "cost" field. It is called by the builders before save.
	product.CostValidator = func() func(int) error {
		validators := productDescCost.Validators
		fns := [...]func(int) error{
			validators[0].(func(int) error),
			validators[1].(func(int) error),
		}
		return func(cost int) error {
			for _, fn := range fns {
				if err := fn(cost); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// productDescPrice is the schema descriptor for price field.
	productDescPrice := productFields[3].Descriptor()
	// product.PriceValidator is a validator for the "price" field. It is called by the builders before save.
	product.PriceValidator = func() func(int) error {
		validators := productDescPrice.Validators
		fns := [...]func(int) error{
			validators[0].(func(int) error),
			validators[1].(func(int) error),
		}
		return func(price int) error {
			for _, fn := range fns {
				if err := fn(price); err != nil {
					return err
				}
			}
			return nil
		}
	}()
}
